// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: awe.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AWEService_Post_FullMethodName   = "/awe.AWEService/Post"
	AWEService_Stream_FullMethodName = "/awe.AWEService/Stream"
)

// AWEServiceClient is the client API for AWEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AWEService with both unary and streaming RPCs
type AWEServiceClient interface {
	// Post is a unary RPC that returns a status response
	Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	// Stream is a server streaming RPC that periodically sends random integer data
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
}

type aWEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWEServiceClient(cc grpc.ClientConnInterface) AWEServiceClient {
	return &aWEServiceClient{cc}
}

func (c *aWEServiceClient) Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, AWEService_Post_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aWEServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AWEService_ServiceDesc.Streams[0], AWEService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AWEService_StreamClient = grpc.ServerStreamingClient[StreamResponse]

// AWEServiceServer is the server API for AWEService service.
// All implementations must embed UnimplementedAWEServiceServer
// for forward compatibility.
//
// AWEService with both unary and streaming RPCs
type AWEServiceServer interface {
	// Post is a unary RPC that returns a status response
	Post(context.Context, *PostRequest) (*PostResponse, error)
	// Stream is a server streaming RPC that periodically sends random integer data
	Stream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error
	mustEmbedUnimplementedAWEServiceServer()
}

// UnimplementedAWEServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAWEServiceServer struct{}

func (UnimplementedAWEServiceServer) Post(context.Context, *PostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedAWEServiceServer) Stream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedAWEServiceServer) mustEmbedUnimplementedAWEServiceServer() {}
func (UnimplementedAWEServiceServer) testEmbeddedByValue()                    {}

// UnsafeAWEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWEServiceServer will
// result in compilation errors.
type UnsafeAWEServiceServer interface {
	mustEmbedUnimplementedAWEServiceServer()
}

func RegisterAWEServiceServer(s grpc.ServiceRegistrar, srv AWEServiceServer) {
	// If the following call pancis, it indicates UnimplementedAWEServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AWEService_ServiceDesc, srv)
}

func _AWEService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWEServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AWEService_Post_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWEServiceServer).Post(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AWEService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AWEServiceServer).Stream(m, &grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AWEService_StreamServer = grpc.ServerStreamingServer[StreamResponse]

// AWEService_ServiceDesc is the grpc.ServiceDesc for AWEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "awe.AWEService",
	HandlerType: (*AWEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _AWEService_Post_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _AWEService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "awe.proto",
}
